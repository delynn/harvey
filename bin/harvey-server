#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var glob = require('glob');
var async = require('async');
var pkg = require('../package.json');
var color = require('cli-color');
var Hapi = require('hapi');
var Harvey = require('../index.js');
var harvey = new Harvey();
var SuiteImporter = require('../lib/suiteImporter.js');
var suiteImporter = new SuiteImporter();
var reporterFactory = require('../lib/reporters/reporterFactory.js');
var Status = require('../lib/util/status.js');
var loadJson = require('../lib/util/loadJson.js');
var path = require('path');
var commandLine = require('commander');
var streams = require('memory-streams');


var options = getCommandLineArguments();

//Get the config for the server
var configPath = options.configFile || path.join(process.cwd(), 'harvey-server.config.json');
try {
	config = loadJson(configPath);
} catch(ex) {
	fail(ex);
}

// Create an http server with a host, port, and options
var server = new Hapi.Server('0.0.0.0', config.httpPort);

// Add the route
server.route({
    method: 'POST',
    path: '/suites/{appName}/{suitePath*}',
    handler: runTests
});
server.route({
    method: 'GET',
    path: '/suites/{appName}/{suitePath*}',
    handler: runTestsViaGet
});

// Start the server
server.start();

console.log('Listening on port ' + config.httpPort);

function runTestsViaGet(request, reply) {
	//Hapi can't handle adding a route for a variable length path followed
	//by a concrete path part, so we have to manually check the route here.
	//We only want to run the tests on a GET if the path ends in /results.
	var pathParts = request.params.suitePath.split('/');
	if(pathParts[pathParts.length - 1] !== 'results') { 
		reply('Method Not Supported').code(405);
	}

	runTests(request, reply);
}

function runTests(request, reply) {
	var appName = request.params.appName;
	var suitePath = request.params.suitePath;

	//If the path ends in '/results', remove it
	suitePath = suitePath.replace(/\/results$/, '');

	console.log('Running tests for \'' + suitePath + '\'...');

	var appConfig = config.applications[appName];
	var testConfig = (appConfig.defaultConfigFile) ? loadJson(appConfig.defaultConfigFile) : {};

	var reporterId = request.query.reporter || 'json';
	var reporter = reporterFactory.createReporter(reporterId);
	var reporterContentType = getReporterContentType(reporterId);

	var absoluteSuitePath = path.join(appConfig.rootDirectory, suitePath);

	fs.exists(absoluteSuitePath, function(exists) {
		if(exists) {
			fs.lstat(absoluteSuitePath, function(error, stats) {
				if(error) {
					console.log('Error running tests for \'' + suitePath + '\': ' + error);
					return reply(error).code(500);
				}

				var testFiles;
				if(stats.isFile()) {
					testFiles = [absoluteSuitePath];
				}
				else {
					var testFiles = findAllTestFilesUnderDirectory(absoluteSuitePath, appConfig.testFileSuffix);
				}

				testSuiteDatas = suiteImporter.import(testFiles);

				executeTestSuites(testSuiteDatas, testConfig, function(error, results) {
					if(error) {
						console.log('Error running tests for \'' + suitePath + '\': ' + error);
						return reply(error).code(500);
					}

					var outputStream = new streams.WritableStream();
					reporter.reportResults(results, config, outputStream, function() { 
						reply(outputStream.toString()).header('content-type', reporterContentType);;
					});

					console.log('Completed running tests for \'' + suitePath + '\'');
				});

			});
		}
		else {
			console.log('Tests not found for \'' + suitePath + '\'');
			reply('Not Found').code(404);
		}
	});
};


function findAllTestFilesUnderDirectory(directoryPath, testFileSuffix) {
	var fileNames = [];
	glob.sync(directoryPath + '**/*' + testFileSuffix).forEach(function(file) {
		fileNames.push(file);
	});
	return fileNames;
}

function executeTestSuites(testSuiteDatas, testConfig, callback) {
	var parallelTestSuites = [];
	testSuiteDatas.forEach(function(testSuiteData) {
		parallelTestSuites.push(function(cb) {
			harvey.run(testSuiteData, testConfig, cb);
		});
	});

	var timeStarted = new Date();

	async.parallel(parallelTestSuites, function(error, results) {
		if (error) {
			return callback(error);
		}
		var totalTestsFailed = 0,
			totalTestsExecuted = 0,
			totalTestsSkipped = 0;

		results.forEach(function(result) {
			totalTestsFailed += result.testsFailed;
			totalTestsExecuted += result.testsExecuted;
			totalTestsSkipped += result.testsSkipped;
		});

		var overallResults = {
			timeStarted: timeStarted,
			timeEnded: new Date(),
			testsExecuted: totalTestsExecuted,
			testsFailed: totalTestsFailed,
			testsSkipped: totalTestsSkipped,
			suiteResults: results
		};
		
		callback(null, overallResults);
	});
};

function getReporterContentType(reporterName) {

	switch(reporterName) {
		case 'html': return 'text/html';
		case 'json': return 'application/json';
		default: return "text/plain";
	};
}

function getCommandLineArguments() {

	commandLine
		.version(pkg.version)
		.usage('[options]')
		.option('-c, --config-file <path>', 'The path to the config file')
		.parse(process.argv);

	return commandLine;
}

function fail(error) {
	if (!(error instanceof Error)) {
		// give all error messages a stack trace for debug purposes
		error = new Error(error);
	}

	if (options.debug) {
		console.error(color.red(error.stack));
	}
	else {
		console.error(color.red(error.message));
	}
	process.exit(1);
}